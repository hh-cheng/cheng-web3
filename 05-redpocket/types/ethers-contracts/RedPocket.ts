/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RedPocketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimedCount"
      | "claimedUsers"
      | "count"
      | "isEqual"
      | "provider"
      | "redPocketMap"
      | "totalAmount"
      | "getBalance"
      | "getRemainingCount"
      | "deposit"
      | "grabRedPocket"
      | "refund"
      | "emergencyStop"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RedPocketClaimed"
      | "RedPocketCreated"
      | "RedPocketFinished"
      | "RedPocketRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "isEqual", values?: undefined): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redPocketMap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grabRedPocket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyStop",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEqual", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redPocketMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grabRedPocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStop",
    data: BytesLike
  ): Result;
}

export namespace RedPocketClaimedEvent {
  export type InputTuple = [claimer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [claimer: string, amount: bigint];
  export interface OutputObject {
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPocketCreatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    amount: BigNumberish,
    count: BigNumberish,
    isEqual: boolean
  ];
  export type OutputTuple = [
    provider: string,
    amount: bigint,
    count: bigint,
    isEqual: boolean
  ];
  export interface OutputObject {
    provider: string;
    amount: bigint;
    count: bigint;
    isEqual: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPocketFinishedEvent {
  export type InputTuple = [remainingAmount: BigNumberish];
  export type OutputTuple = [remainingAmount: bigint];
  export interface OutputObject {
    remainingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPocketRefundedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedPocket extends BaseContract {
  connect(runner?: ContractRunner | null): RedPocket;
  waitForDeployment(): Promise<this>;

  interface: RedPocketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimedCount: TypedContractMethod<[], [bigint], "view">;

  claimedUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  count: TypedContractMethod<[], [bigint], "view">;

  isEqual: TypedContractMethod<[], [boolean], "view">;

  redPocketMap: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalAmount: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getRemainingCount: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  grabRedPocket: TypedContractMethod<[], [void], "nonpayable">;

  refund: TypedContractMethod<[], [void], "nonpayable">;

  emergencyStop: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimedCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimedUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEqual"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "provider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redPocketMap"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "grabRedPocket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyStop"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "RedPocketClaimed"
  ): TypedContractEvent<
    RedPocketClaimedEvent.InputTuple,
    RedPocketClaimedEvent.OutputTuple,
    RedPocketClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RedPocketCreated"
  ): TypedContractEvent<
    RedPocketCreatedEvent.InputTuple,
    RedPocketCreatedEvent.OutputTuple,
    RedPocketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RedPocketFinished"
  ): TypedContractEvent<
    RedPocketFinishedEvent.InputTuple,
    RedPocketFinishedEvent.OutputTuple,
    RedPocketFinishedEvent.OutputObject
  >;
  getEvent(
    key: "RedPocketRefunded"
  ): TypedContractEvent<
    RedPocketRefundedEvent.InputTuple,
    RedPocketRefundedEvent.OutputTuple,
    RedPocketRefundedEvent.OutputObject
  >;

  filters: {
    "RedPocketClaimed(address,uint256)": TypedContractEvent<
      RedPocketClaimedEvent.InputTuple,
      RedPocketClaimedEvent.OutputTuple,
      RedPocketClaimedEvent.OutputObject
    >;
    RedPocketClaimed: TypedContractEvent<
      RedPocketClaimedEvent.InputTuple,
      RedPocketClaimedEvent.OutputTuple,
      RedPocketClaimedEvent.OutputObject
    >;

    "RedPocketCreated(address,uint256,uint256,bool)": TypedContractEvent<
      RedPocketCreatedEvent.InputTuple,
      RedPocketCreatedEvent.OutputTuple,
      RedPocketCreatedEvent.OutputObject
    >;
    RedPocketCreated: TypedContractEvent<
      RedPocketCreatedEvent.InputTuple,
      RedPocketCreatedEvent.OutputTuple,
      RedPocketCreatedEvent.OutputObject
    >;

    "RedPocketFinished(uint256)": TypedContractEvent<
      RedPocketFinishedEvent.InputTuple,
      RedPocketFinishedEvent.OutputTuple,
      RedPocketFinishedEvent.OutputObject
    >;
    RedPocketFinished: TypedContractEvent<
      RedPocketFinishedEvent.InputTuple,
      RedPocketFinishedEvent.OutputTuple,
      RedPocketFinishedEvent.OutputObject
    >;

    "RedPocketRefunded(uint256)": TypedContractEvent<
      RedPocketRefundedEvent.InputTuple,
      RedPocketRefundedEvent.OutputTuple,
      RedPocketRefundedEvent.OutputObject
    >;
    RedPocketRefunded: TypedContractEvent<
      RedPocketRefundedEvent.InputTuple,
      RedPocketRefundedEvent.OutputTuple,
      RedPocketRefundedEvent.OutputObject
    >;
  };
}
